<?xml version="1.0" encoding="UTF-8"?>
<section xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude" xml:lang="en"
    xml:id="majisti.application.resource.translate" version="5.0">
    <title>Translate</title>

    <para>The <classname>I18n</classname> resource will basically just initiate
        an null translator. Every application should make use of a translation
        adapter, even if they are unilingual. By ensuring that a null translator
        is used, any time a given application needs to migrate to a multilingual
        website, it needs not to upgrade its code base, just add another
        concrete adapter (e.g: gettext), translate and be done with it. </para>
    <note>
        <para>The null translator always returns the same string it was asked to
            translate. When the application migrates into a multilingual one,
            you only need to add a concrete translation adapter.</para>
    </note>
    <section>
        <title>Automatically using gettext</title>
        <para>Majisti automatically searches for <code>.mo</code> files under
            ${majisti.app.path}/library/models/i18n/${currentLocale}. Where
                <code>${currentLocale}</code> is automatically gotten from the
                <link linkend="majisti.application.locales"
                    ><classname>\Application\Locales</classname></link> object.
            If an MO file (file generated by the <link
                xlink:href="http://www.gnu.org/software/gettext/">gettext</link>
            extension) is found for the current locale, the null translator will
            be replaced with a
                <classname>Zend_Translate_Adapter_Gettext</classname>.</para>
    </section>
</section>
