<?xml version="1.0" encoding="UTF-8"?>
<chapter 
    xmlns="http://docbook.org/ns/docbook" 
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude" 
    xml:lang="en" xml:id="majisti.view" 
    version="5.0">
    
    <title>Majisti\View</title>
    
    <para>The <classname>View</classname> class is basically the same as a
            <classname>Zend_View</classname> class except that it adds two more
        behaviours. <itemizedlist>
            <listitem>
                <para>It proxies the <methodname>translate</methodname>
                    function from a translator with the 'underscore' function.
                    That way, a controller can do
                        <methodname>$this->view->_('messageToTranslate')</methodname>
                    or a view can do the same with
                        <methodname>$this->_('messageToTranslate')</methodname>.</para>
            </listitem>
            <listitem>
                <para>It support multiple script directories working in
                    concordance with the <link
                        xlink:href="majisti.controller.dispatcher.html"
                        >Multiple Dispatcher</link>.</para>
            </listitem>
        </itemizedlist></para>
    <section>
        <title>Oriented object HTML</title>
        <para>With the view, it is possible to use object oriented HTML such as
            phpQuery. Instead of outputing the content using the
                <methodname>print</methodname> or <methodname>echo</methodname>
            functions, you pass the object as a return object, using the
                <methodname>setRenderReturn($obj)</methodname> method within
            your view
            scripts.<programlisting>//view.phtml
$container = pq('&lt;div />')
    ->addClass('foo')
    ->append($this->render('anotherView.phtml') //provided it uses setRenderReturn as well
;

$this->setRenderReturn($container);</programlisting></para>
        <para>Using an OO approach opens the way for very flexible layouts and
            content while limiting (if not removing at all) the usage of php
                tags.<bridgehead>phtml inheritence</bridgehead></para>
        <para>You can also use inheritence within view scripts when using the
                <methodname>setRenderReturn()</methodname> function. Since
            objects are returned whether than being outputed, you can call the
                <methodname>renderParent(__FILE__)</methodname> function to call
            a parent script located at the same script
            path.<programlisting>majisti/
    libraries/
        MajistiX/
            AnExtension/
                views/
                    scripts/
                        majistix/
                            anExtension/
                                index.phtml
//index.phtml
$container = pq('&lt;div />')
    ->addClass('.container')
    ->html($this->_("Hello World!"));

$this->setRenderReturn($container);

myApp/
    application/
        modules/
            main/
                views/
                    scripts/
                        majistix/
                            anExtension/
                                index.phtml

//index.phtml

$container = $this->renderParent(__FILE__);
$container->addClass('anotherClass');

$this->setRenderReturn($container);</programlisting></para>
        <para><varname>__FILE__</varname> is mendatory for the function to work
            so it can easily tell which script is actually calling that
            function.</para>
    </section>
    
    <xi:include href="helpers.xml" />
    <xi:include href="scripts.xml" />
</chapter>
