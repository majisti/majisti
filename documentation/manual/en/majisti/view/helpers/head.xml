<?xml version="1.0" encoding="UTF-8"?>
<section xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude" xml:lang="en"
    xml:id="majisti.view.helpers.head" version="5.0">
    
    <title>Head optimizers</title>
    
    <para>Head optimizers are strategies that can be used Zend view helpers head
                instances such as the headlink and headscript.
                        <classname>Majisti\View\Helper\Headlink</classname> and
                        <classname>Majisti\View\Helper\Headscript</classname>
                are concrete optimizers that will bundle and minify css or js
                files. Every optimizer must extend the
                        <classname>AbstractOptimizer</classname> class.</para>
    
        <section xml:id="majisti.view.helpers.head.headlink-optimizer">
                
                <title>Headlink/Headscript Optimizer</title>
                <para>The following will speak in terms of the HeadLink
                        Optimizer with CSS files, but the exact same applies for
                        the HeadScript Optimizer for JS files.</para>
                
                <para>The headlink optimizer is an optimizing strategy that can be used with the
                        <classname>Majisti\View\Helper\Headlink</classname> to bundle and/or minify CSS
                        stylesheets appended to the given headlink object.</para>
        </section>
        
        <section xml:id="majisti.view.helpers.headlink">
                <title>Headlink view helper</title>
                <para>The Majisti headlink view helper extends the
                                <classname>Zend_View_Helper_Headlink</classname>
                        class and adds behaviours that allow you to greatly
                        increase the loading time of your stylesheets while in
                        production mode by bundling the links, minifying them or
                        both. <emphasis>Bundling</emphasis> packs multiple given
                        links into a master file to allow only one fetching
                        instead of many. For example, you could bundle three or
                        four CSS stylesheets into a master.css file.
                                <emphasis>Minifying</emphasis> your file(s)
                        means compressing every file, removing all the white
                        spaces and packing everything into a tight chunk of
                        text. This helps reducing the size of files and thus,
                        the loading time. In production mode, you will most
                        likely want your site to be as performant as possible,
                        and so you may use the <code>optimize</code> function,
                        wich calls the <code>bundle</code> function, immediatly
                        followed by the <code>minify</code> function. It results
                        in having a single minified master file, bearing the
                        name <code>yourMasterName.min.css</code>. </para>
                <para>By default, the view helper makes use of the cache, to
                        store which files have been bundled and/or minified and
                        when. This way, the master file is not rewritten over
                        and over. This would be rather counter-productive
                        considering the goal of the helper. The cache will be
                        flushed and the master file rewritten in any of these cases:<itemizedlist>
                                <listitem>
                                        <para>You have removed a link from the
                                        head.</para>
                                </listitem>
                                <listitem>
                                        <para>You have appended a link to the
                                        head.</para>
                                </listitem>
                                <listitem>
                                        <para>You have modified files that were
                                        cached.</para>
                                </listitem>
                        </itemizedlist></para>
                <para>The view helper needs a given
                                <classname>AbstractOptimizer</classname>
                        strategy to do it's bidding. Majisti provides a default
                        optimizer named
                        <classname>HeadLinkOptimizer</classname>. </para>
                <para>To sum up the new features added by
                                <classname>Majisti\View\Helper\HeadLink</classname> :<itemizedlist>
                                <listitem>
                                        <para><command>Bundle</command> : Merge
                                        multiple files into a master
                                        file.</para>
                                </listitem>
                                <listitem>
                                        <para><command>Minify</command> :
                                        Compress one or many files, removing
                                        white spaces and creating files with
                                        .min prepended.</para>
                                </listitem>
                                <listitem>
                                        <para><command>Optimize</command>:
                                        Running both bundle and minify,
                                        resulting in a master.min file
                                        representing mulitple files merged and
                                        compressed. This option offers maximum performance.<warning>
                                        <para>Be careful when using the minify
                                        function without bundling as all the
                                        files that will get minified will be
                                        outputed directly beside the original
                                        file, even in external libraries, so be
                                        careful when using urls that point to
                                        somewhere external yo your application
                                        directory.</para>
                                        </warning></para>
                                </listitem>
                        </itemizedlist></para>
                <section>
                        <title>Remapping URLs</title>
                        <para>You can remap any given URLs that are within disk
                                read access. Suppose you access a CSS file
                                located in another library with a valid URL
                                poiting to that file, you can make sure it is
                                bundled by remapping its url. Remmaping URLs
                                only consists of telling where an actial used
                                URL within the <classname>headlink</classname>
                                points to in terms of physical path on the
                                disk.<programlisting>$optimizer->remapUrl('/myapp.local/public/styles', '/path/to/myapp/public/styles');</programlisting></para>
                        <para>This way, all css files prepended with the
                        provided url will be optimized.</para>
                </section>
        </section>
        <section xml:id="majisti.view.helpers.headlink.usage"><title>Usage</title>
        <example>
                <title>Usage of
                        Majisti\View\Helper\Headlink</title>
                <para>
                        <emphasis>Optimizing your
                                stylesheets</emphasis>
                </para>
                <programlisting>/* bundling all css files together under master.min.css */
$view = $this->getView();
$optimizer = new \Majisti\View\Helper\Head\HeadLinkOptimizer($view, 
    'path' => ${majisti.app.path} . '/public/styles'
    'env'  => ${majisti.app.env});
$optimizer->setOptimizationEnabled(); //If not in production or staging envirronment.

/* will create an optimized master.min.css file located under your /public/styles folder */
$optimizer->optimize(${majisti.app.path} . '/public/styles/master.css', ${majisti.app.baseUrl} . '/styles/master.css');</programlisting>
                <para>Note the <code>optimize()</code> function
                        parameters. The first one is the target
                        file path, while the second one is the
                        target file <emphasis role="bold"
                                >URL</emphasis>. </para>
                <para>This example would bundle all of the CSS
                        files appended to the head, then minify
                        the master file to output one big,
                        compressed CSS file. Also, note that
                        once the optimizing has been completed
                        succesfully, your headlink object
                        <emphasis>has been modified to append
                                only the <code>master.min.css</code>
                                file</emphasis>. Do not worry though,
                        nothing has been deleted from your
                        server. </para>
                <para>Also, the resulting master file will be
                        versionized, meaning that the link to
                        the CSS file will be ending with a
                        version parameter in the form of
                        <code>?v=xxxxxxxxxxx</code>. The version
                        is equivalent to the timestamp at which
                        the cache was created.</para>
                <para><emphasis>Bundling
                        stylesheets</emphasis><programlisting>/* bundling all css files together under master.css */
$optimizer->setBundlingEnabled(); //If not in production or staging envirronment.
$optimizer->bundle(${majisti.app.path} . '/public/styles/master.css', ${majisti.app.baseUrl} . '/styles/master.css');</programlisting></para>
                <para>Using <methodname>bundle</methodname>
                        instead of the
                        <methodname>optimize()</methodname>
                        function will result in a single
                        <code>master.css?v=xxxxxxxxx</code> file
                        without having ".min" appended nor being
                        minified. The files will only have been
                        merged.</para>
                <para><emphasis>Minifying
                        stylesheets</emphasis><programlisting>/* bundling all css files together under master.css */
$optimizer->setMinifyingEnabled(); //If not in production or staging envirronment.
$optimizer->minify('master');</programlisting></para>
                <para>Calling <code>minify()</code> only results
                        in having several ".min.css" files. For
                        each CSS file appended to the head, a
                        ".min.css" file will be created. Note
                        that <code>minify()</code> requires only
                        the cache namespace parameter. Since the
                        view object is passed to the optimizer's
                        constructor, it knows where it's CSS
                        files are located and will write it's
                        dot min files at the same location.
                        Also, when calling minify alone, no
                        version is appended to the created
                        file(s).</para>
        </example>
                </section>
</section>