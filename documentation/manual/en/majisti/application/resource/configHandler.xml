<?xml version="1.0" encoding="UTF-8"?>
<section xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude" xml:lang="en"
    xml:id="majisti.application.resource.configHandler" version="5.0">

    <title>ConfigHandler</title>

    <para> The <classname>Confighandler</classname> resource enables easy <link
            xlink:href="majisti.config.handlers.html">config handling</link>
        through the application's configuration. It makes use of the
            <classname>Composite</classname> handler to aggregate multiple
        handlers that will modify the entire configuration. </para>

    <example>
        <title>Using the config handler resource</title>
        <para> Any sort of config handling is supported by this resource. To add
            a handler that will handle the global configuration you simply need
            to do: </para>

        <programlisting><![CDATA[
resources.configHandler.import      = 1
resources.configHandler.property    = 1]]></programlisting>

        <para> That would enable the already shipped <link
                xlink:href="majisti.config.handlers.html#majisti.config.handlers.property"
                >Property</link> and <link
                xlink:href="majisti.config.handlers.html#majisti.config.handlers.import"
                >Import</link> handlers. You may note though that Import and
            Property handers are already enabled within Majisti's core
            configuration and if you need those disabled you would only need to
            override their values:</para>

        <programlisting><![CDATA[
resources.configHandler.import      = 0
resources.configHandler.property    = 0]]></programlisting>

        <para> To specify a custom class already loadable from the autoloader,
            you can simply provide: </para>

        <programlisting><![CDATA[
resources.configHandler.custom              = "My_Config_Handler_Custom"

/* PHP5.3 namespace supported too */
resources.configHandler.customNamespaced    = "\My\Config\Handler\CustomNamespace"]]></programlisting>

        <para>Should you ever need to pass options to your custom class -
            provided the class accepts an array of options within its
            constructor - you can use the following:</para>

        <programlisting><![CDATA[
resources.configHandler.aUniqueKey[class]   = "My\Config\Handler\CustomNamespace"
resources.configHandler.aUniqueKey[key]     = "value1"
resources.configHandler.aUniqueKey[]        = "value2"]]></programlisting>

        <para>Note that the 'class' key is used to define which custom class you
            want to use. All other params will be passed to the class'
            constructor as an array. If you want to use a class that would be
            found within the pluginsPath, you would replace 'aUniqueKey' with the
            class name (property, for instance) The next code snippet shows this
            along with another usefull use of parameters with the <link
                xlink:href="majisti.config.handlers.html#majisti.config.handlers.markup"
                >Markup</link> handler:</para>

        <programlisting><![CDATA[
resources.configHandler.markup[] = "bbcode_html"]]></programlisting>

        <para>The configuration would now be able to support bbcode tags in it.
            (Although this will not really work on ini files because of the
            bbcode syntax such as [b][/b] but this was to show that you can use
            other markups or custom ones with options). </para>
    </example>
</section>
