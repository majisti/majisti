<?xml version="1.0" encoding="UTF-8"?>
<section 
    xmlns="http://docbook.org/ns/docbook" 
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude" 
    xml:lang="en" xml:id="majisti.application.addons.manager" 
    version="5.0">
    
    <title>Manager</title>
    <para>
        <note>
            <para>In order to understand the use and purpose of the addons
                manager, one first needs to understand the concepts of modules
                and extensions Majisti refers to. Your can read more about
                modules <link xlink:href="majistix#majistix.module"
                    >here</link>, or you may wish to read more about extensions
                    <link xlink:href="majistix.extension"
                    >there</link>.</para>
        </note>
    </para>
    <para>The addons manager's purpose is to load the wanted modules and
        extensions into your application. Using a configuration file, the
        addons manager will add the controller fallback directory of your given
        module to the dispatcher. If loading an extension, it will call the
            <code>load()</code> function of that extension's bootstrap. That is
        how simple the addons manager is. Since this information is pretty
        straight to the point, here is a more detailed explanation of the
        manager's behaviours:</para>
    <para>
        <example>
            <title>Setting your addons path</title>
            <para> In order to load any addons, the manager needs to be
                supplied with paths where he may find them. Where do you put
                your addons? Here is an example of where in a project your
                could put
                these:<programlisting>APPLICATION_PATH/addons/
    modules/
        module1/
            controllers/
                controller1.php
                controller2.php
                controller3.php
                controllerN.php
    extensions/
        extension1/
            bootstrap.php</programlisting></para>
        </example>
    </para>
    <para>Using the resource component, the manager will set the addons path(s)
        automatically. Every path needs to comply with the above structure,
        meaning that it has to provide a modules and extensions folder, in wich
        every module supplies it's set of controllers and every extension
        provides it's bootstrap file. The addons resource will also attempt to
        load your modules and extensions automatically. <link
            xlink:href="majisti.application.resource#majisti.application.resource.addons"> Read more about
            the addons resource.</link></para>
    <para>
        <example>
            <title>Using the manager manually</title>
            <para> The manager provides functions to register the addons path,
                load modules and extensions and get these paths. The best way
                to illustrate any usage is by showing an
                example:<programlisting>$manager = new \Majisti\Application\Addons\Manager();
$manager->registerAddonsPath('pathToYourAddons', 'YourNamespace');

$manager->loadModule('YourModuleName', 'YourNamespace');
$manager->loadExtension('YourExtensionName', 'YourNamespace');</programlisting></para>
        </example>
    </para>
</section>