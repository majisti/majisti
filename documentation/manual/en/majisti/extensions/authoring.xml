<?xml version="1.0" encoding="UTF-8"?>
<section xmlns="http://docbook.org/ns/docbook"
         xml:id="majisti.extensions.authoring"
         version="5.0">
    <title>Extensions authoring</title>
    <para>TODO</para>
    <section xml:id="majisti.extensions.authoring.writing">
        <title>Creating</title>
        <para>This section is dedicated on writing an extension for Majisti.
            Extensions are meant to be foremost additions to applications.
            Extensions are not <emphasis role="strong">Components</emphasis> and
            therefore are designed to add reusable and <emphasis role="strong"
                >extensible</emphasis> code to applications. Authoring an
            extension for Majisti must follow all its convention to assure its
            functionnality.</para>
        <section>
            <title>Structure</title>
            <para>First of all, every extensions follow Zend's
                    <emphasis>Module</emphasis> structure. Remember that a
                module is just any folder that contains its own set of
                    <acronym>MVC</acronym> components. A request to
                http://mysite.com/blog/index/index would dispatch to the blog
                module, which contains the controller models, views and its own
                bootstrap.  Any module can contain the following:</para>
            <itemizedlist>
                <listitem>
                    <para>Controllers</para>
                </listitem>
                <listitem>
                    <para>Models</para>
                </listitem>
                <listitem>
                    <para>Controller plugins</para>
                </listitem>
                <listitem>
                    <para>Views</para>
                </listitem>
            </itemizedlist>
            <para>In addition to those default folders, Majisti added a little
                more to make it feel more like an extension:<itemizedlist>
                    <listitem>
                        <para>Handlers (GRASP controller pattern)</para>
                    </listitem>
                    <listitem>
                        <para>Unit tests</para>
                    </listitem>
                    <listitem>
                        <para>Public directory containing accessible files by
                            the <acronym>www</acronym>.</para>
                    </listitem>
                    <listitem>
                        <para>Extension's documentation</para>
                    </listitem>
                </itemizedlist></para>
            <para>In short, the folder structure follows this
                pattern:<programlisting>AnExtension/
    documentation/
    models/
    plugins/
    public/
        scripts/
        styles/
        images/
        scss/
    tests/
    views/
        helpers/
        filters/
        scripts/
            majistix/
                AnExtension/
                    layouts/
                    index/
                        ...
    Bootstrap.php
    Version.php</programlisting></para>
            <para>
                <note>
                    <para>Majisti makes sure that upon bootstrapping the
                        extension, a <classname>ModuleAutoloader</classname> is
                        instancied to automatically load classes without the use
                        of <methodname>require_once</methodname>. This include
                        models, views, handlers, forms, etc. (See the
                            <classname>ResourceAutoloader</classname>).</para>
                </note>
            </para>
        </section>
        <section>
            <title>Conventions</title>
            <para>Every extensions must follow the listed design decisions to
                help standardize extensions and faciliate extensibility.<itemizedlist>
                    <listitem>
                        <para>Styling is done with SCSS (formally SASS, but
                            SASS2 is now known as SCSS) and the Compass
                            framework.</para>
                    </listitem>
                    <listitem>
                        <para>Client side scripting is done with the conjunction
                            of the Mootools Class and JQuery plugin.</para>
                    </listitem>
                    <listitem>
                        <para>Docbook documentation is used to describe how to
                            use the extension and its various options.</para>
                    </listitem>
                    <listitem>
                        <para>PHPQuery for HTML generation.</para>
                    </listitem>
                    <listitem>
                        <para>Doctrine2 is used for persistent models.</para>
                    </listitem>
                </itemizedlist>Along with thoses mendatory conventions are some
                optionnal ones that are still important, but mostly considered
                as best practices:</para>
            <itemizedlist>
                <listitem>
                    <para>Spriting and compressing images to base64 (handy
                        utility functions are available with Compass)</para>
                </listitem>
                <listitem>
                    <para>Both integration tests and unit tests must be
                        present.</para>
                </listitem>
                <listitem>
                    <para>In case a <acronym>CLI</acronym> (<emphasis
                            role="bold">C</emphasis>ommand <emphasis role="bold"
                            >L</emphasis>ine <emphasis role="bold"
                        >I</emphasis>nterface) is used,  it must add either
                        functionality to Majisti's CLI, or the application's
                        one.</para>
                </listitem>
            </itemizedlist>
            <section>
                <title>Styling with SCSS and Compass</title>
                <para>TODO</para>
            </section>
            <section>
                <title>Client side scripting with Mootools and JQuery</title>
                <para>JQuery and Mootools were chosen for two specific purposes.
                    JQuery is Majisti's main javascript library for its DOM
                    manipulation, ui effects and plugin system.  Mootools was
                    custom built using only Class and Class.extras. Mootools
                    make it easy to create, implement and extend classes. In
                    addition, Moo4q (Mootools for jQuery) might be used to use
                    both techniques to make a plugin as extensible as
                    possible.</para>
                <para>Majisti uses the <methodname>majisti.ext</methodname>
                    global object to store client side scripting for extensions.
                    Every extensions must use a single namespace in that global
                    object, which resolve as the extension name itself. Here's
                    an
                    exemple:<programlisting>$.extend(majisti.ext.myExtension, {
    foo: function(bar) {
        console.log(bar);
    },
    myClass: new Class({
        //...
    }
});</programlisting></para>
                <para>We can see here the usage of both Mootools for classes and
                    jQuery to extend the global extension object.</para>
            </section>
            <section>
                <title>Docbook documentation</title>
                <para>TODO</para>
            </section>
            <section>
                <title>PHPQuery for HTML generation</title>
                <para>PHPQuery was chosen because it does not add anything new
                    to someone who already knows JQuery. Majisti's use of
                    PHPQuery is mainly to distribute html in an 'object' way. In
                    short, you can manipulate an entire DOM before actually
                    outputing it. For extensions, the same applies, and become
                    even more important. The author can go on and implement a
                    default view script for displaying the various models and
                    users can add markup to the PHPQuery objects without having
                    to rewrite the entire
                    view.<programlisting>&lt;?php

// anExtension/views/scripts/aView.phtml

$container = pq('&lt;div />')
    ->attr('id', 'majistix-anExtension-container')
    ->append(pq('&lt;p />')
        ->html('This is a paragraph.')
    )
;

$this->setRenderReturn($container);

// PHPQuery objects can be reused anywhere
// aProject/application/modules/main/views/scripts/index/index.phtml

$content = pq('&lt;div />')
    ->addClass('.block')
    ->append($this->render('majistix/anExtension/aView.phtml))
;

// inheritence and polymorphism can even be used
// aProject/application/modules/main/views/scripts/majistix/anExtension/aView.phtml

$content = pq('&lt;div />')
    ->addClass('.block')
    ->append($this->renderParent(__FILE__))
;</programlisting></para>
                <para>With PHPQuery, HTML becomes much much flexible in how it
                    is generated before being outputted, leading to clever loose
                    coupling and object reuse. For a more in-depth look on how
                    to use HTML with Majisti, see this section.</para>
            </section>
            <section>
                <title>Doctrine2 and persistent models</title>
                <para>TODO</para>
            </section>
        </section>
    </section>
</section>