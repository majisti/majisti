<?xml version="1.0" encoding="UTF-8"?>
<section  xmlns="http://docbook.org/ns/docbook" 
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xml:id="majisti.extensions.usage"
          version="5.0">
    <title>Usage</title>
    <section xml:id="majitix.extensions.usage.directories"><title>Setting directories</title>
        <para>By default, Majisti's extension resource adds two extensions
            directories: the Majisti's library extensions directory (located
            under majisti/libraries/MajistiX) and the application's directory
            (located under yourProject/library/extensions). You can use
            extensions located under MajistiX and in your application right out
            of the box. However, if you need to add more directories to the
            stack you can always do the
            following:<programlisting>resources.extensions.paths.myextensions.namespace = "My\App\\"
resources.extensions.paths.myextensions.path      = "/path/to/extensions"</programlisting></para>
        <para>Note that since extensions can be explicitely enabled, the paths
            cannot be reset through the configuration. You can only add to the
            stack. If you need to reset everything or change the paths, you need
            to use the
                <classname>Majisti\Application\Extension\Manager</classname> .
            The extensions manager's purpose is to load the wanted extensions
            into your application by calling its respective bootstrap file. It
            is available as a bootstrap resource and you can change paths this
            way:<programlisting>$manager = $bootstrap->getPluginResource('Extensions')->getManager();
$manager->setExtensionPaths(array(
    array(
        'namespace' => 'MyNamespace',
        'path'      => '/path/to/extensions'
    )
));</programlisting></para>
        <para>Again, in most cases, you won't really need to add an extension
            directory, unless you are using your own set of extensions as an
            external vendor library, which Majisti favors of course, since code
            reuse is one of its primary goals.</para>
    </section>
    <section xml:id="majisti.extensions.usage.adding">
        <title>Adding</title>
        <para>Adding an extension is quite simple. You just drop it under  the
                <filename>majisti/dropins</filename> folder and majisti's cli
            tool located under <filename>majisti/bin/majisti.php</filename> with
            the command <command>php majisti.php ext:install
                extensionName</command>. This will create all the required
            symlinks within majisti. Unit tests will also be added to MajistiX'
            test suite and the documentation will be added to the chapter
            dedicated on extensions. A dependency resolver makes sure to check
            that the extension being installed meets all its required
            dependencies (library version, other extensions needed for it to
            work and etc.).</para>
    </section>
    <section>
        <title>Removing</title>
        <para>Removing an extension is quite simple, you run the <command>php
                majisti.php ext:uninstall extensionName</command>
            command.</para>
        <warning>
            <para>Adding and removing extensions (and also dependency resolving)
                are not supported by Majisti 0.4.0 and such functionality is
                scheduled in the next revisions.</para>
        </warning>
    </section>
    <section xml:id="majisti.extensions.usage.enabling"><title>Enabling</title>
        <para>Enabling extensions within Majisti is meant to be easy. Whenever
            you need to add an extension to your application stack you usually
            do the following within your
            configuration:<programlisting>1) resources.extension[] = Foo //implicitely enabled

2) resources.extension.Foo = 1

3) resources.extension.Foo.enabled = 1

4) resources.extension.Foo.anOption = aValue //implicitely enabled

5) resources.extension.Foo.enabled  = 0
6) resources.extension.Foo.anOption = aValue</programlisting></para>
        <para>In case the extension needs or provide configurable set of options
            you would do the
            following:<programlisting>resources.extension.ExtensionName.enabled  = 1
resources.extension.ExtensionName.anOption = optionValue</programlisting></para>
        <para>Every other key aside from <emphasis>enabled</emphasis> will be
            passed to the extension.</para>
        <para>
            <note>
                <para>All extensions begin with an uppercase and follow the
                    camelCase convention. Also, the first line above is
                    optionnal. If you provide options, Majisti assumes that this
                    extension should be enabled. If you want to provide options
                    but disable the application (say in another environment) you
                    would use 0 as <emphasis>ExtensionName.enabled</emphasis>
                    value.</para>
            </note>
        </para>
        <para>Remember that the extensions stack is meant to override other
            extensions of the same name. For example, if AnExtension is avaible
            in the library and that you add AnExtension within your
            application's library, the latter will be used, unless you use
            fallback dispatching (to come in future versions).</para>
    </section>
    
    <section xml:id="majisti.extensions.usage.extending">
        <title>Extending</title>
        <para>Extending an extension consists the extension of the following concepts:</para>
        <itemizedlist>
            <listitem>
                <para>Bootstrapping and configuration</para>
            </listitem>
            <listitem>
                <para>Styling (css) using SCSS</para>
            </listitem>
            <listitem>
                <para>Client side (javascript) using Mootools and JQuery</para>
            </listitem>
            <listitem>
                <para>Controller plugins</para>
            </listitem>
            <listitem>
                <para>MVC components</para>
            </listitem>
            <listitem>
                <para>Html output using PHPQuery</para>
            </listitem>
        </itemizedlist>
        <para>Extensions are authored using Majisti's conventions, which means
            that you can expect to have a very flexible approach on how you can
            add or override custom parts to an already existant extension. You
            do not need to rewrite the extension from scratch, and that should
            be the case for every concepts that were enumarated bellow because
            extending an extension should not only be limited to extending PHP
            classes.</para>
    </section>
</section>
