<?xml version="1.0" encoding="UTF-8"?>
<section  xmlns="http://docbook.org/ns/docbook" 
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xml:id="majisti.extensions.usage"
          version="5.0">
    <title>Usage</title>
    <section xml:id="majitix.extensions.usage.directories"><title>Setting directories</title>
        <para>By default, Majisti's extension resource adds two extensions
            directories: the library's extensions directory (libraries/MajistiX)
            and the application's directory (library/extensions). You can use
            extensions located under MajistiX and in your application right out
            of the box. However, if you need to add more directories to the
            stack you can always do the
            following:<programlisting>resources.extensions.paths[]['My\App\\'] = "/path/to/extensions"</programlisting></para>
        <para>Note that since extensions can be explicitely enabled, the paths
            cannot be reset through the configuration. You can only add to the
            stack. If you need to reset or change the paths, you need to use the
                <classname>Majisti\Application\Extension\Manager</classname> .
            The manager is available as a bootstrap resource like
            so:<programlisting>$manager = $bootstrap->getPluginResource('Extensions')->getManager();
$manager->setExtensionPaths(array(
    array(
        'namespace' => 'MyNamespace',
        'path'      => '/path/to/extensions'
    )
));</programlisting></para>
    </section>
    <section xml:id="majistix.extensions.usage.manager">
        <title>Manager</title>
        <para>
            <note>
                <para>In order to understand the use and purpose of the extensions
                    manager, one first needs to understand the concepts of modules
                    and extensions Majisti refers to. Your can read more about
                    modules <link xlink:href="majistix#majistix.module">here</link>,
                    or you may wish to read more about extensions <link
                        xlink:href="majistix.extension">there</link>.</para>
            </note>
        </para>
        <para>The addons manager's purpose is to load the wanted modules and
            extensions into your application. Using a configuration file, the
            addons manager will add the controller fallback directory of your given
            module to the dispatcher. If loading an extension, it will call the
            <code>load()</code> function of that extension's bootstrap. That is
            how simple the addons manager is. Since this information is pretty
            straight to the point, here is a more detailed explanation of the
            manager's behaviours:</para>
        <para>
            <example>
                <title>Setting your addons path</title>
                <para> In order to load any addons, the manager needs to be
                    supplied with paths where he may find them. Where do you put
                    your addons? Here is an example of where in a project your
                    could put
                    these:<programlisting>APPLICATION_PATH/addons/
    modules/
        module1/
            controllers/
                controller1.php
                controller2.php
                controller3.php
                controllerN.php
    extensions/
        extension1/
            bootstrap.php</programlisting></para>
            </example>
        </para>
        <para>Using the resource component, the manager will set the addons path(s)
            automatically. Every path needs to comply with the above structure,
            meaning that it has to provide a modules and extensions folder, in wich
            every module supplies it's set of controllers and every extension
            provides it's bootstrap file. The addons resource will also attempt to
            load your modules and extensions automatically. <link
                xlink:href="majisti.application.resource#majisti.application.resource.addons"> Read more about
                the addons resource.</link></para>
        <para>
            <example>
                <title>Using the manager manually</title>
                <para> The manager provides functions to register the addons path,
                    load modules and extensions and get these paths. The best way
                    to illustrate any usage is by showing an
                    example:<programlisting>$manager = new \Majisti\Application\Addons\Manager();
$manager->registerAddonsPath('pathToYourAddons', 'YourNamespace');

$manager->loadModule('YourModuleName', 'YourNamespace');
$manager->loadExtension('YourExtensionName', 'YourNamespace');</programlisting></para>
            </example>
        </para>
    </section>
    <section xml:id="majisti.extensions.usage.adding">
        <title>Adding</title>
        <para>TODO</para>
    </section>
    <section xml:id="majisti.extensions.usage.enabling"><title>Enabling</title>
        <para>Enabling extensions within Majisti is meant to be easy. Whenever
            you need to add an extension to your application stack you usually
            do the
            following:<programlisting>resources.extensions[] = ExtensionName

OR

resources.extensions.ExtensionName.enabled = 1 //prefered method</programlisting></para>
        <para>In case the extension needs or provide configurable set of options
            you would do the
            following:<programlisting>resources.extension.ExtensionName.enabled = 1
resources.extension.ExtensionName.anOption = optionValue</programlisting></para>
        <para>Every other key aside from <emphasis>enabled</emphasis> will be
            passed to the extension.</para>
        <para>
            <note>
                <para>All extensions begin with an uppercase and follow the
                    camelCase convention. Also, the first line above is
                    optionnal. If you provide options, Majisti assumes that this
                    extension should be enabled. If you want to provide options
                    but disable the application (say in another environment) you
                    would use 0 as <emphasis>ExtensionName.enabled</emphasis>
                    value.</para>
            </note>
        </para>
        <para>Remember that the extensions stack is meant to override other
            extensions of the same name. For example, if AnExtension is avaible
            in the library and that you add AnExtension within your
            application's library, the latter will be used.</para>
    </section>
    
    <section xml:id="majisti.extensions.usage.extending">
        <title>Extending</title>
        <para>Extending an extension consists the extension of the following concepts:</para>
        <itemizedlist>
            <listitem>
                <para>Bootstrapping and configuration</para>
            </listitem>
            <listitem>
                <para>Styling (css)</para>
            </listitem>
            <listitem>
                <para>Client side (javascript)</para>
            </listitem>
            <listitem>
                <para>Controller plugins</para>
            </listitem>
            <listitem>
                <para>MVC components</para>
            </listitem>
            <listitem>
                <para>Html output</para>
            </listitem>
        </itemizedlist>
    </section>
</section>
