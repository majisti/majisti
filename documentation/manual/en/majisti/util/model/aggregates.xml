<?xml version="1.0" encoding="UTF-8"?>
<section xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude" xml:lang="en"
    xml:id="majisti.util.model.aggregates" version="5.0">
    <title>Aggregates</title>
    <para>Models that behave according to a global aggregate, part of the
        global aggregate or custom aggregate find themselves requiring to
        provide access to the aggregate object. Aggregates are simply Marker
        Interfaces that tell implementing classes that they must provide the
        getters and setters. Since inheritence is not always the solution
        wanted, the package comes with both the interface and the abstract
        class implementing that interface.</para>
    <para>Currently, Majisti supports aggregators for those listed objects:<itemizedlist>
            <listitem>
                <para>Zend_Config</para>
            </listitem>
            <listitem>
                <para>Zend_View</para>
            </listitem>
        </itemizedlist><example>
            <title>Using aggregators</title>
            <para>Suppose you have a model object needing some aggregation you
                would simply do:</para>
            <programlisting>namespace My\Model;

class Bank extends \Majisti\Util\Model\Aggregator\&lt;Aggregator Class Here>
{
    ...
}

or

class Bank implements \Majisti\Util\Model\Aggregator\&lt;Aggregator Interface Here>
{
    ...
}</programlisting>
        </example></para>
    <para>Since this is really a basic approach - that is the use of getters
        and setters for aggregates -, Majisti does not plan to overkill and
        provides a complete set of aggregators. This would abuse the
        inheritence in such that if the user wants to creates other models that
        aggreate other business models, it should be implemented by the user
        and not be overly provided by the library. Therefore, Majisti provides
        only the crucial ones, simply to avoid code repetition and to impose a
        standard organisation for objects using common aggregation (such as
        configuration and view).</para>
</section>
