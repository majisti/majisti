<?xml version="1.0" encoding="UTF-8"?>
<section xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude" xml:lang="en"
    xml:id="majisti.codeStandards.css" version="5.0">
    <title>PHP standards</title>
    <para>
        <orderedlist>
            <para>These are the PHP coding standards (<emphasis role="underline"
                    >heavily</emphasis> based on Zend and Symfony and you may
                optionally refer to them first). Language agnostic code style
                applies also to Javascript.</para>
        </orderedlist>
    </para>
    <section id="coding-standard.overview">
        <title>Overview</title>

        <section id="coding-standard.overview.scope">
            <title>Scope</title>

            <para>This document provides guidelines for code formatting and
                documentation to individuals and teams contributing to Majisti.
                Many developers using Zend Framework have also found these
                coding standards useful because their code's style remains
                consistent with all Zend Framework code. However, pay close
                attention to those standards, since Majisti derives a bit from
                it and is really strict on its usage. It is also worth noting
                that it requires significant effort to fully specify coding
                standards. </para>

            <note>
                <para>Note: Sometimes developers consider the establishment of a
                    standard more important than what that standard actually
                    suggests at the most detailed level of design. The
                    guidelines in Zend Framework's coding standards capture
                    practices that have worked well on the Zend Framework
                    project. You may modify these standards or use them as is in
                    accordance with the terms of the Zend Framework <ulink
                        url="http://framework.zend.com/license">license</ulink>. </para>
            </note>

            <para>
                Topics covered in Zend Framework's coding standards include:
            </para>

            <itemizedlist>
                <listitem>
                    <para><acronym>PHP</acronym> File Formatting</para>
                </listitem>

                <listitem>
                    <para>Naming Conventions</para>
                </listitem>

                <listitem>
                    <para>Coding Style</para>
                </listitem>

                <listitem>
                    <para>Inline Documentation</para>
                </listitem>
            </itemizedlist>
        </section>

        <section id="coding-standard.overview.goals">
            <title>Goals</title>
            <para>Coding standards are important in any development project, but
                they are particularly important when many developers are working
                on the same project. Coding standards help ensure that the code
                is high quality, has fewer bugs, and can be easily maintained. </para>
        </section>
        <section id="coding-standard.overview.goals">
            <title>Structure</title>
            <itemizedlist>
                <listitem>
                    <para>Never use short tags (&lt;?); </para>
                </listitem>
                <listitem>
                    <para>Don’t end class files with the usual ?> closing tag;
                        Always add an extra carriage return at the end of the
                        file.</para>
                </listitem>
                <listitem>
                    <para>Indentation is done by steps of four spaces (tabs are
                        never allowed); </para>
                </listitem>
                <listitem>
                    <para>Use the linefeed character (0x0A) to end lines;</para>
                </listitem>
                <listitem>
                    <para>Add a single space around operators (==, &amp;&amp;,
                        ...); </para>
                </listitem>
                <listitem>
                    <para>Add a single space before the opening parenthesis of a
                        control keyword (if, else, for, while, ...); Add a space
                        after the first opening parenthesis and one before the
                        last one.</para>
                </listitem>
                <listitem>
                    <para>Add a blank line before return statements; </para>
                </listitem>
                <listitem>
                    <para>Don’t add trailing spaces at the end of lines; </para>
                </listitem>
                <listitem>
                    <para>Use braces to indicate control structure body
                        regardless of the number of statements it contains;
                    </para>
                </listitem>
                <listitem>
                    <para>Put braces on their own line for classes, methods, and
                        functions declaration but on the same line for control
                        statements, with the exception of condition statements
                        that overflow the print margin (see Maximum line
                        length).</para>
                </listitem>
                <listitem>
                    <para>Separate the conditional statement and the opening
                        brace with a single space and no blank line; </para>
                </listitem>
                <listitem>
                    <para>Declare visibility explicitly for class, methods, and
                        properties (usage of var is prohibited); Favor protected
                        over private when contributing in the core
                        library.</para>
                </listitem>
                <listitem>
                    <para>Use lowercase PHP native typed constants: false, true,
                        and null. The same goes for array(); </para>
                </listitem>
                <listitem>
                    <para>Use uppercase strings for constants with words
                        separated with underscores; </para>
                </listitem>
                <listitem>
                    <para>Define one class per file; </para>
                </listitem>
                <listitem>
                    <para>Declare class properties before methods; </para>
                </listitem>
                <listitem>
                    <para>Put static, final or abstract before the function's
                        visibility.</para>
                </listitem>
            </itemizedlist>
        </section>
    </section>

    <section id="coding-standard.php-file-formatting">
        <title>PHP File Formatting</title>

        <section id="coding-standard.php-file-formatting.indentation">
            <title>Indentation</title>

            <para>Indentation should consist of 4 spaces. Tabs are not allowed.</para>
        </section>

        <section id="coding-standard.php-file-formatting.max-line-length">
            <title>Maximum Line Length</title>

            <para>The target line length is 80 characters. That is to say,
                Majisti library developers should strive keep each line of their
                code under 80 characters where possible and practical. However,
                longer lines are acceptable in some circumstances. The maximum
                length of any line of <acronym>PHP</acronym> code is 120
                characters. </para>
        </section>

        <section id="coding-standard.php-file-formatting.line-termination">
            <title>Line Termination</title>

            <para>Line termination follows the Unix text file convention. Lines
                must end with a single linefeed (LF) character. Linefeed
                characters are represented as ordinal 10, or hexadecimal 0x0A. </para>

            <para>Note: Do not use carriage returns (CR) as is the convention in
                Apple OS's (0x0D) or the carriage return - linefeed combination
                    (<acronym>CRLF</acronym>) as is standard for the Windows OS
                (0x0D, 0x0A). </para>
        </section>
    </section>

    <section id="coding-standard.naming-conventions">
        <title>Naming Conventions</title>

        <section id="coding-standard.naming-conventions.classes">
            <title>Classes</title>

            <para> Zend Framework standardizes on a class naming convention
                whereby the names of the classes directly map to the directories
                in which they are stored. The root level directory of Majisti's
                standard library is the
                    <filename>majisti/libraries/Majisti/</filename> directory,
                whereas the root level directory of Majistis extensions library
                is the <filename>majisti/libraries/MajistiX</filename>
                directory. All Majisti classes are stored hierarchically under
                these root directories. </para>

            <para>Class names may only contain alphanumeric characters. Numbers
                are permitted in class names but are discouraged in most cases.
                All classes are PHP namespaced and therefore
                    "<filename>Majisti/Application/Bootstrap.php</filename>"
                must map to the class name
                    "<classname>Majisti\Application\Bootstrap</classname>". </para>

            <para>If a class name is comprised of more than one word, the first
                letter of each new word must be capitalized. Successive
                capitalized letters are not allowed, e.g. a class "Majisti\ACL"
                is not allowed while "<classname>Majisti\Acl</classname>" is
                acceptable.  Currently, Majisti uses the Zend Framework with
                underscored classes until ZF2 gets released with PHP namespaced
                classes.</para>

            <para>See the class names in the standard and extensions for
                examples of this classname convention. </para>
        </section>

        <section id="coding-standard.naming-conventions.abstracts">
            <title>Abstract Classes</title>

            <para>In general, abstract classes follow the same conventions as
                    <link linkend="coding-standard.naming-conventions.classes"
                    >classes</link>, with one additional rule: abstract class
                names must begin in the term, "Abstract". As an example,
                    <classname>Majisti\Controller\Plugin</classname> is
                considered an invalid nam for an abstract class, but
                    <classname>Majisti\Controller\AbstractPlugin</classname>
                would be a valid name. </para>
        </section>

        <section id="coding-standard.naming-conventions.interfaces">
            <title>Interfaces</title>

            <para>Interfaces do not follow the same convention as abstract
                classes. Interfaces must follow a more generic approach, closely
                related to the Marker Interface pattern. As an example,
                    <classname>Majisti\Application\IBootstrap</classname> is
                considered an invalid name, but
                    <classname>Majisti\Application\Bootstrap</classname> or
                    <classname>Majisti\Application\Bootstrappable</classname>
                would be valid names. <note>
                    <para>Majisti-0.4.0 does not follow this convention. But
                        since this is pre-production release (prior to 1.0),
                        these conventions will be respected in 0.5+
                        revisions.</para>
                </note></para>
        </section>

        <section id="coding-standard.naming-conventions.filenames">
            <title>Filenames</title>

            <para>For all other files, only alphanumeric characters,
                underscores, and the dash character ("-") are permitted. Spaces
                are strictly prohibited. </para>

            <para>Any file that contains <acronym>PHP</acronym> code should end
                with the extension "<filename>.php</filename>", with the notable
                exception of view scripts. </para>

            <para>
                File names must map to class names as described above.
            </para>
        </section>

        <section id="coding-standard.naming-conventions.functions-and-methods">
            <title>Functions and Methods</title>

            <para>Function names may only contain alphanumeric characters.
                Underscores are not permitted. Numbers are permitted in function
                names but are discouraged in most cases. </para>

            <para>Function names must always start with a lowercase letter. When
                a function name consists of more than one word, the first letter
                of each new word must be capitalized. This is commonly called
                "camelCase" formatting. </para>

            <para>Verbosity is generally encouraged. Function names should be as
                verbose as is practical to fully describe their purpose and
                behavior. </para>

            <para>These are examples of acceptable names for functions: </para>

            <programlisting language="php"><![CDATA[filterInput()

getElementById()

widgetFactory()]]></programlisting>

            <para>For object-oriented programming, accessors for instance or
                static variables should always be prefixed with "get" or "set".
                In implementing design patterns, such as the singleton or
                factory patterns, the name of the method should contain the
                pattern name where practical to more thoroughly describe
                behavior.  For exemple let's take the Visitor Pattern in
                application within Majisti:<programlisting><![CDATA[<?php

namespace Majisti\Model\Form\Layout;

interface Layout
{
    public function visitForm(\Zend_Form $form);
    public function visitElement(\Zend_Form_Element $element);
}]]></programlisting></para>

            <para>For methods on objects that are declared with the "private" or
                "protected" modifier, the first character of the method name
                must <emphasis role="bold">never</emphasis> begin with an
                underscore (as in Zend). The rationale behind this is in
                inheritence, where functions visibility may widen up to
                public.</para>

            <para>Functions in the global scope (a.k.a "floating functions") are
                strictly prohibited (with the exception of phpQuery). Consider
                wrapping these functions in a static class. </para>
        </section>

        <section id="coding-standard.naming-conventions.variables">
            <title>Variables</title>

            <para>Variable names may only contain alphanumeric characters.
                Underscores are not permitted. Numbers are permitted in variable
                names but are discouraged in most cases. </para>

            <para>For instance variables that are declared with the "private" or
                "protected" modifier, the first character of the variable name
                must be a single underscore. This is the only acceptable
                application of an underscore in a variable name. Member
                variables declared "public" should never start with an
                underscore and are prohibited as instances variables since they
                break encapsulation; use accessors and mutators instead. The
                only exception is in unit tests, where instance variables can be
                public, to make it easy for someone extending your unit tests to
                tweak your variables without having to rewrite all over the
                    <methodname>setUp()</methodname> function.</para>

            <para>As with function names (see section 3.3) variable names must
                always start with a lowercase letter and follow the "camelCaps"
                capitalization convention. </para>

            <para>Verbosity is generally encouraged. Variables should always be
                as verbose as practical to describe the data that the developer
                intends to store in them. Terse variable names such as
                    "<varname>$i</varname>" and "<varname>$n</varname>" are
                discouraged for all but the smallest loop contexts. If a loop
                contains more than 20 lines of code, the index variables should
                have more descriptive names. They must also be as logic as
                possible, consider a <code>foreach</code> loop looping over the
                    <varname>$cookies</varname> variable. That would lead
                iteration on cookies with a <varname>$cookie</varname> variable:<programlisting><![CDATA[foreach( $cookies as $cookie ) {
    ...
}]]></programlisting></para>
            <section>
                <title>Declaration</title>
                <para>Successive declaration of variables must be aligned.
                    Consider the following
                    exemple:<programlisting>/* WRONG */
$name = $this->getName();
$content = $this->getContent();

/* CORRECT */
$name    = $this->getName();
$content = $this->getContent();</programlisting></para>
            </section>
        </section>

        <section id="coding-standard.naming-conventions.constants">
            <title>Constants</title>

            <para>
                Constants may contain both alphanumeric characters and underscores. Numbers are
                permitted in constant names.
            </para>

            <para>
                All letters used in a constant name must be capitalized, while all words in a
                constant name must be separated by underscore characters.
            </para>

            <para>
                For example, <constant>EMBED_SUPPRESS_EMBED_EXCEPTION</constant> is permitted but
                <constant>EMBED_SUPPRESSEMBEDEXCEPTION</constant> is not.
            </para>

            <para> Constants must be defined as class members with the "const"
                modifier. Defining constants in the global scope with the
                "define" ffunction is not permitted in the core library, Majisti
                tries to avoid the <link
                    xlink:href="http://www.thedeveloperday.com/php-anti-patterns/"
                    >Constantitis</link> anti-pattern.</para>
        </section>
    </section>

    <section id="coding-standard.coding-style">
        <title>Coding Style</title>

        <section id="coding-standard.coding-style.php-code-demarcation">
            <title>PHP Code Demarcation</title>

            <para>
                <acronym>PHP</acronym> code must always be delimited by the full-form, standard
                <acronym>PHP</acronym> tags:
            </para>

            <programlisting language="php"><![CDATA[
<?php

?>
]]></programlisting>

            <para>Short tags are never allowed. For files containing only
                    <acronym>PHP</acronym> code, the closing tag must always be
                omitted.</para>
        </section>

        <section id="coding-standard.coding-style.strings">
            <title>Strings</title>

            <section id="coding-standard.coding-style.strings.literals">
                <title>String Literals</title>

                <para>
                    When a string is literal (contains no variable substitutions), the apostrophe or
                    "single quote" should always be used to demarcate the string:
                </para>

                <programlisting language="php"><![CDATA[
$a = 'Example String';
]]></programlisting>
            </section>

            <section id="coding-standard.coding-style.strings.literals-containing-apostrophes">
                <title>String Literals Containing Apostrophes</title>

                <para>
                    When a literal string itself contains apostrophes, it is permitted to demarcate
                    the string with quotation marks or "double quotes". This is especially useful
                    for <constant>SQL</constant> statements:
                </para>

                <programlisting language="php"><![CDATA[
$sql = "SELECT `id`, `name` from `people` "
     . "WHERE `name`='Fred' OR `name`='Susan'";
]]></programlisting>

                <para>Of course sql is never used since Majisti uses Doctrine,
                    but you get the point. This syntax is preferred over
                    escaping apostrophes as it is much easier to read. </para>
            </section>

            <section id="coding-standard.coding-style.strings.variable-substitution">
                <title>Variable Substitution</title>

                <para>
                    Variable substitution is permitted using either of these forms:
                </para>

                <programlisting language="php"><![CDATA[
$greeting = "Hello $name, welcome back!";

$greeting = "Hello {$name}, welcome back!";
]]></programlisting>

                <para>
                    For consistency, this form is not permitted:
                </para>

                <programlisting language="php"><![CDATA[
$greeting = "Hello ${name}, welcome back!";
]]></programlisting>
            </section>

            <section id="coding-standard.coding-style.strings.string-concatenation">
                <title>String Concatenation</title>

                <para>
                    Strings must be concatenated using the "." operator. A space must always
                    be added before and after the "." operator to improve readability:
                </para>

                <programlisting language="php"><![CDATA[
$company = 'Zend' . ' ' . 'Technologies';
]]></programlisting>

                <para>When concatenating strings with the "." operator, it is
                    encouraged to break the statement into multiple lines to
                    improve readability. In these cases, each successive line
                    should be padded with white space such that the ".";
                    operator is aligned under the "=" operator: </para>

                <programlisting language="php"><![CDATA[
$sql = "SELECT `id`, `name` FROM `people` "
     . "WHERE `name` = 'Susan' "
     . "ORDER BY `name` ASC ";
]]></programlisting>
            </section>
        </section>

        <section id="coding-standard.coding-style.arrays">
            <title>Arrays</title>

            <section id="coding-standard.coding-style.arrays.numerically-indexed">
                <title>Numerically Indexed Arrays</title>

                <para>Negative numbers are not permitted as indices.</para>

                <para>An indexed array may start with any non-negative number,
                    however all base indices besides 0 are discouraged. </para>

                <para>When declaring indexed arrays with the <type>Array</type>
                    function, a trailing space must be added after each comma
                    delimiter to improve readability: </para>

                <programlisting language="php"><![CDATA[
$sampleArray = array(1, 2, 3, 'Zend', 'Studio');
]]></programlisting>

                <para>It is permitted to declare multi-line indexed arrays using
                    the "array" construct. In fact, as soon as the array
                    surpasses the max length line limit, the array must be
                    written in the multi-line format. When the variables are
                    really small or that the array is really long, you can
                    combine semantically logical variables together. In this
                    case, each line must be padded with 4 spaces following the
                    previous line's start column such that beginning of each
                    line is aligned this way:</para>

                <programlisting language="php"><![CDATA[
$sampleArray = array(
    1, 2, 3,
    'Zend', 
    'Studio',
    $a, $b, $c,
    56.44, $d, 500,
);
]]></programlisting>

                <para>When using this declaration, we encourage using a trailing
                    comma for the last item in the array; this minimizes the
                    impact of adding new items on successive lines, and helps to
                    ensure no parse errors occur due to a missing comma. </para>
            </section>

            <section id="coding-standard.coding-style.arrays.associative">
                <title>Associative Arrays</title>

                <para>When declaring associative arrays with the
                        <type>Array</type> construct, breaking the statement
                    into multiple lines is encouraged. In this case, each
                    successive line must be padded with white space such that
                    both the keys and the values are aligned: </para>

                <programlisting language="php"><![CDATA[
$sampleArray = array(
    'firstKey'  => 'firstValue',
    'secondKey' => 'secondValue'
);
]]></programlisting>

                <para>When using this declaration, we encourage using a trailing
                    comma for the last item in the array; this minimizes the
                    impact of adding new items on successive lines, and helps to
                    ensure no parse errors occur due to a missing comma. </para>
            </section>
        </section>

        <section id="coding-standard.coding-style.classes">
            <title>Classes</title>

            <section id="coding-standard.coding-style.classes.declaration">
                <title>Class Declaration</title>

                <para>The brace should always be written on the line underneath
                    the class name. </para>

                <para>Every class must have a documentation block that conforms
                    to the PHPDocumentor standard. The <code>@desc</code>,
                        <code>@author</code>  and <code>@license</code> are
                    mendatory.</para>

                <para>All code in a class must be indented with four spaces. </para>

                <para>Only one class is permitted in each <acronym>PHP</acronym>
                    file. </para>

                <para>Placing additional code in class files is permitted but
                    discouraged. In such files, two blank lines must separate
                    the class from any additional <acronym>PHP</acronym> code in
                    the class file. </para>

                <para>The following is an example of an acceptable class
                    declaration: </para>

                <programlisting language="php"><![CDATA[
/**
 * @desc Documentation Block Here.
 * @author Steven Rosato
 *
 * @license http://opensource.org/licenses/gpl-license.php GNU Public License
 */
class SampleClass
{
    // all contents of class
    // must be indented four spaces
}
]]></programlisting>

                <para>Classes that extend other classes or which implement
                    interfaces should declare their dependencies on the same
                    line when possible. </para>

                <programlisting language="php"><![CDATA[
class SampleClass extends FooAbstract implements BarInterface
{
}
]]></programlisting>

                <para>If as a result of such declarations, the line length
                    exceeds the <link
                        linkend="coding-standard.php-file-formatting.max-line-length"
                        >maximum line length</link>, break the line before the
                    "extends" and/or "implements" keywords, and pad those lines
                    by one indentation level. </para>

                <programlisting language="php"><![CDATA[
class SampleClass
    extends FooAbstract
    implements BarInterface
{
}
]]></programlisting>

                <para>If the class implements multiple interfaces and the
                    declaration exceeds the maximum line length, break after
                    each comma separating the interfaces, and indent the
                    interface names such that they align. </para>

                <programlisting language="php"><![CDATA[
class SampleClass
    implements BarInterface,
               BazInterface
{
}
]]></programlisting>
            </section>

            <section id="coding-standard.coding-style.classes.member-variables">
                <title>Class Member Variables</title>

                <para>Any variables declared in a class must be listed at the
                    top of the class, above the declaration of any methods. </para>

                <para>The <emphasis>var</emphasis> construct is not permitted.
                    Member variables always declare their visibility by using
                    one of the <property>private</property>,
                        <property>protected</property>, or
                        <property>public</property> modifiers. Giving access to
                    member variables directly by declaring them as public is
                    permitted but discouraged in favor of accessor methods (set
                    &amp; get). </para>
            </section>
        </section>

        <section id="coding-standard.coding-style.functions-and-methods">
            <title>Functions and Methods</title>

            <section id="coding-standard.coding-style.functions-and-methods.declaration">
                <title>Function and Method Declaration</title>

                <para>Methods inside classes must always declare their
                    visibility by using one of the <property>private</property>,
                        <property>protected</property>, or
                        <property>public</property> modifiers. </para>

                <para>As with classes, the brace should always be written on the
                    line underneath the function name. Space between the
                    function name and the opening parenthesis for the arguments
                    is not permitted. </para>

                <para>Functions in the global scope are strongly discouraged. </para>

                <para>The following is an example of an acceptable function
                    declaration in a class: </para>

                <programlisting language="php"><![CDATA[
/**
 * @desc Documentation Block Here.
 * @author Steven Rosato
 *
 * @license http://opensource.org/licenses/gpl-license.php GNU Public License
 */
class Foo
{
    /**
     * @desc Documentation Block here.
     */
    public function bar()
    {
        // all contents of function
        // must be indented four spaces
    }
}
]]></programlisting>

                <para>In cases where the argument list exceeds the <link
                        linkend="coding-standard.php-file-formatting.max-line-length"
                        >maximum line length</link>, you may introduce line
                    breaks. Additional arguments to the function or method must
                    be indented one additional level beyond the function or
                    method declaration. A line break should then occur before
                    the closing argument paren, which should then be placed on
                    the same line as the opening brace of the function or method
                    with one space separating the two, and at the same
                    indentation level as the function or method declaration. The
                    following is an example of one such situation: </para>

                <programlisting language="php"><![CDATA[
/**
 * @desc Documentation Block Here.
 * @author Steven Rosato
 *
 * @license http://opensource.org/licenses/gpl-license.php GNU Public License
 */
class Foo
{
    /**
     * @desc Documentation Block here.
     */
    public function bar($arg1, $arg2, $arg3,
        $arg4, $arg5, $arg6 ) 
    {
        // all contents of function
        // must be indented four spaces
    }
}
]]></programlisting>

                <note>
                    <para>
                        <emphasis>Note</emphasis>: Pass-by-reference is the only parameter passing
                        mechanism permitted in a method declaration.
                    </para>
                </note>

                <programlisting language="php"><![CDATA[
/**
 * @desc Documentation Block Here.
 * @author Steven Rosato
 *
 * @license http://opensource.org/licenses/gpl-license.php GNU Public License
 */
class Foo
{
    /**
     * Documentation Block Here
     */
    public function bar(&$baz)
    {}
}
]]></programlisting>

                <para>Call-time pass-by-reference is strictly prohibited. </para>

                <para>The return value must not be enclosed in parentheses. This
                    can hinder readability, in additional to breaking code if a
                    method is later changed to return by reference. </para>

                <programlisting language="php"><![CDATA[
/**
 * @desc Documentation Block Here.
 * @author Steven Rosato
 *
 * @license http://opensource.org/licenses/gpl-license.php GNU Public License
 */
class Foo
{
    /**
     * WRONG
     */
    public function bar()
    {
        return($this->bar);
    }

    /**
     * RIGHT
     */
    public function bar()
    {
        return $this->bar;
    }
}
]]></programlisting>
            </section>

            <section id="coding-standard.coding-style.functions-and-methods.usage">
                <title>Function and Method Usage</title>

                <para>
                    Function arguments should be separated by a single trailing space after the
                    comma delimiter. The following is an example of an acceptable invocation of a
                    function that takes three arguments:
                </para>

                <programlisting language="php"><![CDATA[
threeArguments(1, 2, 3);
]]></programlisting>

                <para>
                    Call-time pass-by-reference is strictly prohibited. See the function
                    declarations section for the proper way to pass function arguments by-reference.
                </para>

                <para>
                    In passing arrays as arguments to a function, the function call may include the
                    "array" hint and may be split into multiple lines to improve readability. In
                    such cases, the normal guidelines for writing arrays still apply:
                </para>

                <programlisting language="php"><![CDATA[
threeArguments(array(1, 2, 3), 2, 3);

threeArguments(array(1, 2, 3, 'Zend', 'Studio',
    $a, $b, $c,
    56.44, $d, 500), 2, 3
);

threeArguments(array(
    1, 2, 3, 'Zend', 'Studio',
    $a, $b, $c,
    56.44, $d, 500
), 2, 3);
]]></programlisting>
            </section>
        </section>

        <section id="coding-standard.coding-style.control-statements">
            <title>Control Statements</title>

            <section
                id="coding-standard.coding-style.control-statements.if-else-elseif">
                <title>If/Else/Elseif</title>
                <para>Control statements based on the <emphasis>if</emphasis>
                    and <emphasis>elseif</emphasis> constructs must have a
                    single space after the opening parenthesis of the
                    conditional and a single space before the closing
                    parenthesis. </para>
                <para>Within the conditional statements between the parentheses,
                    operators must be separated by spaces for readability. Inner
                    parentheses are encouraged to improve logical grouping for
                    larger conditional expressions. </para>
                <para>Comparisons are reversed, this is to prevent accidental
                    assigments in conditions.</para>
                <para>Always favor === over == and !== over != to ensure the
                    comparison is made on the intended type.</para>
                <para>The opening brace is written on the same line as the
                    conditional statement. The closing brace is always written
                    on its own line. Any content within the braces must be
                    indented using four spaces. </para>
                <programlisting language="php"><![CDATA[
if( 2 !== $a ) {
    $a = 2;
}
]]></programlisting>
                <para>If the conditional statement causes the line length to
                    exceed the <link
                        linkend="coding-standard.php-file-formatting.max-line-length"
                        >maximum line length</link> and has several clauses, you
                    may break the conditional into multiple lines. In such a
                    case, break the line prior to a logic operator, and pad the
                    line such that it aligns under the first character of the
                    conditional clause. The closing paren in the conditional
                    will then be placed on a line with the opening brace, with
                    one space separating the two, at an indentation level
                    equivalent to the opening control statement. </para>
                <programlisting language="php"><![CDATA[
if( ($a === $b)
    && ($b === $c)
    || (Foo::CONST === $d) ) 
{
    $a = $d;
}
]]></programlisting>
                <para>The intention of this latter declaration format is to
                    prevent issues when adding or removing clauses from the
                    conditional during later revisions. </para>
                <para>For "if" statements that include "elseif" or "else", the
                    formatting conventions are similar to the "if" construct.
                    The following examples demonstrate proper formatting for
                    "if" statements with "else" and/or "elseif" constructs: </para>
                <programlisting language="php"><![CDATA[
if( 2 !== $a ) {
    $a = 2;
} else {
    $a = 7;
}

if ( 2 !== $a ) {
    $a = 2;
} else if( 3 === $a ) {
    $a = 4;
} else {
    $a = 7;
}

if( ($a === $b)
    && ($b === $c)
    || (Foo::CONST === $d) ) 
{
    $a = $d;
} else if( ($a !== $b)
    || ($b !== $c) ) 
{
    $a = $c;
} else {
    $a = $b;
}
]]></programlisting>
                <para><acronym>PHP</acronym> allows statements to be written
                    without braces in some circumstances. This coding standard
                    makes no differentiation- all "if", "elseif" or "else"
                    statements must use braces.</para>
            </section>
            <section
                id="coding-standard.coding-style.control-statements.if-else-elseif">
                <title>Conditionnal assigments</title>
                <para>Conditionnal assigments must follow this very simple syntax:<programlisting><![CDATA[
$a = $b === $c
    ? $d
    : $e;
]]></programlisting></para>
            </section>
            <section
                id="coding-standard.coding-style.control-statements.if-else-elseif">
                <title>Assignment in conditions</title>
                <para>Assignment in conditions is permitted. This is
                    particularly usefull in conjucntion with functions that may
                    return false statements.<programlisting><![CDATA[
if( $user = $this->_request->getParam('user', false) ) {
    ....
}
]]></programlisting></para>
            </section>

            <section id="coding-standards.coding-style.control-statements.switch">
                <title>Switch</title>

                <para>Control statements written with the "switch" statement
                    must have a single space before the opening parenthesis of
                    the conditional statement and after the closing parenthesis. </para>

                <para>All content within the "switch" statement must be indented
                    using four spaces. Content under each "case" statement must
                    be indented using an additional four spaces. </para>

                <programlisting language="php"><![CDATA[
switch( $numPeople ) {
    case 1:
        break;

    case 2:
        break;

    default:
        break;
}
]]></programlisting>

                <para>The construct <property>default</property> should never be
                    omitted from a <property>switch</property> statement. </para>

                <note>
                    <para>It is sometimes useful to write a
                            <property>case</property> statement which falls
                        through to the next case by not including a
                            <property>break</property> or
                            <property>return</property> within that case. To
                        distinguish these cases from bugs, any
                            <property>case</property> statement where
                            <property>break</property> or
                            <property>return</property> are omitted should
                        contain a comment indicating that the break was
                        intentionally omitted. </para>
                </note>
            </section>
        </section>

        <section id="coding-standards.inline-documentation">
            <title>Inline Documentation</title>

            <section id="coding-standards.inline-documentation.documentation-format">
                <title>Documentation Format</title>

                <para>All documentation blocks ("docblocks") must be compatible
                    with the phpDocumentor format. Describing the phpDocumentor
                    format is beyond the scope of this document. For more
                    information, visit: <ulink url="http://phpdoc.org/"
                        >http://phpdoc.org/</ulink>
                </para>
                <para>All inline documentation must be wrapped in <code>/*
                        */</code> and not <code>//</code>. The double slashes
                    are permitted only in very simple comments that follow a
                    line a code. In case the inline block must be written on
                    more lines, it should skip a line at the beginning and the
                    end of the code block.</para>
                <para>Inline documentation does not begin with a capitalized
                    letter, except with proper names, acronyms, etc.</para>
                <para>All statements that use a @ end with a period.</para>
                <para>Functions begin with a verb in third person, as to tell
                    that "<emphasis role="italic">this function
                    does</emphasis>".</para>
                <para>All class files must contain a "file-level" docblock at
                    the top of each file and a "class-level" docblock
                    immediately above each class. Examples of such docblocks can
                    be found below. </para>
                <para>
                    <programlisting>/**
 * @desc Calculates n!.
 *
 * @param int $n The n
 * 
 * @return The n! calculated number.
 */
public function factorial($n)
{
    $n = (int) $n;

    /* recursion end condition */
    if( 0 === $n ) {
        return 1;
    }

    /*
     * this is a longer comment
     * that takes more than one line
     */
    return $n + $this->factorial($n - 1); // Complexity: O(n^2)
}</programlisting>
                </para>
            </section>

            <section id="coding-standards.inline-documentation.files">
                <title>Files</title>

                <para>
                    Every file that contains <acronym>PHP</acronym> code must have a docblock at
                    the top of the file that contains these phpDocumentor tags at a minimum:
                </para>

                <programlisting language="php"><![CDATA[
/**
 * @desc Short description for file
 *
 * Long description for file (if any)...
 *
 * @author Author(s) name(s) one on each line, indented
 * @license http://framework.zend.com/license   BSD License
*/
]]></programlisting>
            </section>

            <section id="coding-standards.inline-documentation.classes">
                <title>Classes</title>
                <para>Every class must have a docblock that contains these
                    phpDocumentor tags at a minimum: </para>
                <programlisting language="php"><![CDATA[
/**
 * @desc Short description for class
 *
 * Long description for class (if any)...
 *
 * @author Author(s) name(s), one on each line, indented
 *
 * @license    http://framework.zend.com/license   BSD License
 * @since      Class available since Release 1.5.0
 * @deprecated Class deprecated in Release 2.0.0
 */
]]></programlisting>
            </section>
            <section id="coding-standards.inline-documentation.classes">
                <title>View scripts</title>
                <para>View scripts must have a docblock that contains the same
                    phpDocumentator tags as the classes and function altogether.
                    If the view script is using variables that were passed using
                    the <methodname>partial()</methodname> function, it must
                    state each variable it uses through the @param.<programlisting><![CDATA[
/**
 * @desc Short description for the view script
 *
 * Long description for view script (if any)...
 *
 * @author Author(s) name(s), one on each line, indented
 *
 * @license    http://framework.zend.com/license   BSD License
 * @since      Class available since Release 1.5.0
 * @deprecated Class deprecated in Release 2.0.0
 *
 * @param string $name The name of the the ...
 * @param string $content The content of the ...
 */

$name    = $this->name;
$content = $this->content;
]]></programlisting></para>
            </section>

            <section id="coding-standards.inline-documentation.functions">
                <title>Functions</title>

                <para>
                    Every function, including object methods, must have a docblock that contains at
                    a minimum:
                </para>

                <itemizedlist>
                    <listitem><para>A description of the function using @desc</para></listitem>
                    <listitem><para>All of the arguments using @param</para></listitem>
                    <listitem><para>All of the possible return values using @return</para></listitem>
                </itemizedlist>

                <para>It is not necessary to use the "@access" tag because the
                    access level is already known from the "public", "private",
                    or "protected" modifier used to declare the function. </para>

                <para>If a function or method may throw an exception, use
                    @throws for all known exception classes: </para>

                <programlisting language="php"><![CDATA[
@throws exceptionclass [description]
]]></programlisting>
            </section>
        </section>
    </section>
</section>